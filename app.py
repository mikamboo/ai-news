import os
import time
from dotenv import load_dotenv
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool
from langchain_community.llms import Ollama, Bedrock
from langchain_community.chat_models import BedrockChat

# Load environment variables from .env file
load_dotenv()

# os.environ["SERPER_API_KEY"] = ""
# os.environ["OPENAI_API_KEY"] = ""
# os.environ["OPENAI_MODEL_NAME"] = "gpt-3.5-turbo"
# os.environ["AWS_DEFAULT_REGION"] = "us-east-1"
# os.environ["AWS_ACCESS_KEY_ID"] = ""
# os.environ["AWS_SECRET_ACCESS_KEY"] = ""
# os.environ["AWS_SESSION_TOKEN"] = ""

search_tool   = SerperDevTool()
verbose_mode  = True

# llm = Ollama(model="openhermes", base_url="http://localhost:9000")
# llm = BedrockChat(model_id="mistral.mistral-7b-instruct-v0:2")
# llm = Bedrock(model_id="meta.llama2-13b-v1")
# llm = Bedrock(model_id="amazon.titan-text-lite-v1")
# llm = Bedrock(model_id="anthropic.claude-3-haiku-20240307-v1:0")
llm = BedrockChat(model_id="anthropic.claude-3-haiku-20240307-v1:0")

# Creating a senior researcher agent with memory and verbose mode
news_collector = Agent(
  role='News Collector',
  goal='Rechercher les derni√®res nouvelles sur un sujet donn√©',
  verbose=verbose_mode,
  memory=True,
  backstory=(
    "Passionn√© par l'information et toujours √† l'aff√ªt des derni√®res nouvelles,"
    " cet agent utilise des techniques avanc√©es de recherche pour scanner Internet"
    " et collecter des articles, des blogs et des rapports sur des sujets d'actualit√©."
  ),
  tools=[search_tool],
  allow_delegation=True,
  llm=llm
)

# Creating a writer agent with custom tools and delegation capability
writer = Agent(
  role='Writer',
  goal='R√©dige des r√©sum√©s impactants sur {topic}',
  verbose=verbose_mode,
  memory=True,
  backstory=(
    "Tu es un journaliste √©crivain talentueux qui sait captiver son audience."
    "Tu es capable de r√©diger des r√©sum√©s impactants sur les sujets les plus importants."
    "Tu es passionn√© par l\'√©criture et tu aimes partager tes connaissances avec le monde."
  ),
  tools=[search_tool],
  allow_delegation=False,
  llm=llm
)


# Research task
research_task = Task(
  description=(
    "Rechercher et collecter les {num_posts} principales actualit√©s sur {topic}"
    " Les date de parution doivent √™tre incluses dans la p√©riode du {period}."
    " Focaliser sur les sources fiables et compiler une liste d'articles pertinents."
    " Se limiter aux sites les plus fiables et les plus pertinents."
    " Fournis des liens vers les articles originaux pour plus de d√©tails."
  ),
  expected_output='Une liste d\'articles et de liens sur le sujet {topic}.',
  agent=news_collector,
  llm=llm
)

# Writing task with language model configuration
write_task = Task(
  description=(
    "R√©diger des r√©sum√©s en {lang} des {num_posts} actualit√©s notables sur {topic} dans la p√©riode du {period}."
    " Les r√©sum√©s doivent √™tre clairs et concis, et doivent captiver l'attention du lecteur."
    " G√©n√®re le titre, la cat√©gorie de l'actualit√©, un r√©sum√© court et un r√©sum√© long de chaque actualit√©."
    " R√©dige uniquement en {lang}."
    " Fournis des liens vers les articles originaux pour plus de d√©tails."
  ),
  expected_output=(
    '''
    Le r√©sultat doit √™tre sous d'une liste de bloc format markdown suivant:

    ## Titre de la recherche
    
    ### 1. [Titre de l'actualit√©]

    üè∑Ô∏è Cat√©gorie de l'actualit√©
    
    R√©sum√© court de l'actualit√© (max 50 mots)
    
    R√©sum√© long de l'actualit√© (max 200 mots)
    
    Soucres:
    - [site web](lien article)
    - [site web](lien article)
    - [site web](lien article)


    ### 2. [Titre de l'actualit√©]

    üè∑Ô∏è Cat√©gorie de l'actualit√©
    
    R√©sum√© court de l'actualit√© (max 50 mots)
    
    R√©sum√© long de l'actualit√© (max 200 mots)
    
    Soucres:
    - [site web](lien article)
    - [site web](lien article)
    - [site web](lien article)
    '''
  ),
  agent = writer,
  async_execution = False,
  output_file = f"{time.strftime('%Y-%m-%d_%H:%M:%S', time.localtime())}-news_ai.md"
)


# Forming the tech-focused crew with enhanced configurations
crew = Crew(
  agents=[news_collector, writer],
  tasks=[research_task, write_task],
  process=Process.sequential
)

# Starting the task execution process with enhanced feedback
start_time = time.time()

result = crew.kickoff(inputs={'topic': 'Ev√®nement Digital en France', 'lang': 'fran√ßais', 'period': '1 au 7 mai 2024', 'num_posts': 3})

end_time = time.time()
print(f"Processing time: {end_time - start_time} seconds")
